#!/usr/bin/python
# Copyright (c) 2012, Red Hat, Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Alexander Kurtakov <akurtako@redhat.com>
#          Stanislav Ochotnicky <sochotnicky@redhat.com>

import sys
from xml.etree.ElementTree import fromstring
from StringIO import StringIO

class TagBuilder:
    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = map (lambda x: x.rstrip (), filelist.readlines ())
        for path in paths:
	        self.print_mvn_provides(path)

    def get_fragment_doc(self, fragment_path):
        with open(fragment_path) as f:
            content = f.read()

            start, end = "", ""
            if not fragment_path[-4:] == '.xml':
                start = "<fragments>"
                end = "</fragments>"

            fragments = "{start}{content}{end}".format(start=start,
                                                       content=content,
                                                       end=end)
            return fromstring(fragments)


    def print_mvn_provides(self, path):
        doc = self.get_fragment_doc(path)
        versioned_provides = False
        if doc.find('.//skipProvides') is not None:
            # this is compat package, generate versioned provides
            # yes, the naming is weird
            versioned_provides = True

        for mpart in doc.findall('.//maven'):
            groupId = mpart.find('groupId').text
            artifactId = mpart.find('artifactId').text
            version = mpart.find('version').text
            if versioned_provides:
                print "mvn({gid}:{aid}:{version}) = {version}".format(gid=groupId,
                                                                       aid=artifactId,
                                                                       version=version)
            else:
                print "mvn({gid}:{aid}) = {version}".format(gid=groupId,
                                                            aid=artifactId,
                                                            version=version)


if __name__ == "__main__":
    builder = TagBuilder ()
