#!/usr/bin/python
# Copyright (c) 2012, Red Hat, Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors:
#   Stanislav Ochotnicky <sochotnicky@redhat.com>
#

import os
import sys
import signal
import traceback
from javapackages import Depmap

class TagBuilder:
    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = map (lambda x: x.rstrip (), filelist.readlines ())
        # this is always required because jpackage-utils owns the directory
        print("jpackage-utils")
        provided = []
        if paths:
            # let's first read all fragment files for provided artifacts
            fragment_dir = os.path.dirname(paths[0])
            for dirname, dirnames, filenames in os.walk(fragment_dir):
                for filename in filenames:
                    if filename.endswith(".pom"):
                        continue
                    depmap = Depmap(os.path.join(dirname, filename))
                    provided.extend(depmap.get_provided_artifacts())
        for path in paths:
            if path.endswith(".pom"):
                continue
            self.print_mvn_requires(path, provided)

    def print_mvn_requires(self, path, providedArtifacts):
        depmap = Depmap(path)
        for dependency in depmap.get_required_artifacts():
            for provided in providedArtifacts:
                if (provided.groupId == dependency.groupId and
                    provided.artifactId == dependency.artifactId and
                    provided.classifier == dependency.classifier and
                    provided.extension == dependency.extension):
                    # requires on subpackages are always versioned
                    print("{rpmstr} = {version}".format(
                        rpmstr=dependency.get_rpm_str(dependency.version),
                        version=provided.version))
                    break
            else:
                # TODO: remove when not needed
                # do not generate requires like "a:b:pom:" yet
                if dependency.extension == "pom":
                    dependency.extension = ""
                print(dependency.get_rpm_str(dependency.version))


        jreq = depmap.get_java_requires()
        if jreq is not None:
            try:
                jsplit = jreq.split('.')
                if len(jsplit) != 2:
                    # if we don't have major.minor format, just ignore version
                    raise ValueError("Required Java version not in major.minor format")
                major = int(jsplit[0])
                minor = int(jsplit[1])
                if major > 1 or minor > 5:
                    print("java >= 1:%s.%s" % (major, minor))
                else:
                    print("java >= %s.%s" % (major, minor))
            except ValueError:
                # what? not a numbered major/minor java release?
                print("java")


if __name__ == "__main__":
    try:
        builder = TagBuilder ()
    except Exception, e:
        traceback.print_exc(file=sys.stderr)
        sys.stderr.write(str(e))
        # rpmbuild ignores non-zero exit codes but this that is bad. Make sure
        # the build fails and doesn't silently ignore problems
        os.kill(os.getppid(), signal.SIGKILL)
