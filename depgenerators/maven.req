#!/usr/bin/python
# Copyright (c) 2012, Red Hat, Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors:
#   Stanislav Ochotnicky <sochotnicky@redhat.com>
#

import os
import sys
from xml.etree.ElementTree import fromstring
from StringIO import StringIO

class TagBuilder:
    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = map (lambda x: x.rstrip (), filelist.readlines ())
        # this is always required because jpackage-utils owns the directory
        print("jpackage-utils")
        provided = []
        if paths:
            # let's first read all fragment files for provided GAVs
            provided = self.get_provided_GAVs(os.path.dirname(paths[0]))
        for path in paths:
            self.print_mvn_requires(path, provided)

    def get_provided_GAVs(self, fragment_dir):
        provided = []
        for dirname, dirnames, filenames in os.walk(fragment_dir):
            # print path to all filenames.
            for filename in filenames:
                doc = self.get_fragment_doc(os.path.join(dirname, filename))
                for mpart in doc.findall('.//dependency/maven'):
                    groupId = mpart.find('groupId').text
                    artifactId = mpart.find('artifactId').text
                    version = mpart.find('version').text
                    provided.append((groupId, artifactId, version))
        return provided

    def get_fragment_doc(self, fragment_path):
        buf = StringIO()
        buf.write('<fragments>\n')
        with open(fragment_path) as f:
            buf.write(f.read())
        buf.write('</fragments>')
        fragments = buf.getvalue()
        return fromstring(fragments)

    def print_mvn_requires(self, path, provided):
        doc = self.get_fragment_doc(path)
        for mpart in doc.findall('.//autoRequires'):
            groupId = mpart.find('groupId').text
            artifactId = mpart.find('artifactId').text
            for g, a, v in provided:
                if g == groupId and a == artifactId:
                    # generate versioned requires for our subpackages
                    print("mvn(%s:%s) = %s" %(groupId, artifactId, v))
                    break # skip the else branch
            else:
                print("mvn(%s:%s)" %(groupId, artifactId))

        jreq = doc.find('.//requiresJava')
        if jreq is not None:
            jreq = jreq.text
            jsplit = jreq.split('.')
            if len(jsplit) != 2:
                # if we don't have major.minor format, just ignore version
                print("java")
                return
            try:
                major = int(jsplit[0])
                minor = int(jsplit[1])
                if major > 1 or minor > 5:
                    print("java >= 1:%s.%s" % (major, minor))
                else:
                    print("java >= %s.%s" % (major, minor))
            except ValueError:
                # what? not a numbered major/minor java release?
                print "java"


if __name__ == "__main__":
    builder = TagBuilder ()
