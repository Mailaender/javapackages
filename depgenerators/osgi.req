#!/usr/bin/python

# Copyright (c) 2011, Red Hat, Inc
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# * Neither the name of the <ORGANIZATION> nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Alexander Kurtakov <akurtako@redhat.com>

import sys
import os.path
import zipfile
from zipfile import ZipFile

class TagBuilder:
    
    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = map (lambda x: x.rstrip (), filelist.readlines ())
        for path in paths:
            self.get_osgi_require (path)
    
    def parse_manifest (self, manifest):
        headers = {}
        DELIM = ": "
        name = None
        for line in manifest.readlines():
            split = line.split(DELIM)
            if not name:
                name = split[0].strip()
                headers[name]= split[1].strip()
            else:
                if len(split) < 2:
                    headers[name] = headers[name]+line.strip()
                else:
                    name = split[0].strip()
                    headers[name]= split[1].strip()
        return headers
    
    def split_bundle_name (self, bundles):
        bundlenames = []
        for bundle in bundles.split(','):
            if ")" in bundle or "]" in bundle >0:
                continue
            if ";" in bundle:
                bundlenames.append(bundle.split(";")[0].strip())
            else:
                bundlenames.append(bundle)
                
        return bundlenames
                
            
	  
    def get_osgi_require (self, path):
        if not os.path.islink(path):
            if zipfile.is_zipfile(path):
                jarfile = ZipFile(path)
                manifest = jarfile.open("META-INF/MANIFEST.MF")
                headers = self.parse_manifest(manifest)
                if headers.get("Require-Bundle"):
                    for bundle in self.split_bundle_name(headers.get("Require-Bundle")):
                        print "osgi(%s)" %(bundle) 

if __name__ == "__main__":
    builder = TagBuilder ()
