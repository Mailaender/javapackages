#!/usr/bin/python
# Copyright (c) 2014, Red Hat, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Alexander Kurtakov <akurtako@redhat.com>

import javapackages.common.osgi as osgi
import sys
import os

class TagBuilder(object):

    def __init__(self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = [x.rstrip() for x in filelist.readlines()]
        try:
            buildroot = os.environ['RPM_BUILD_ROOT']
        except KeyError:
            raise Exception("RPM_BUILD_ROOT environment is not set")

        # get all provided bundles
        provided = []
        for dirpath, _, filenames in os.walk(buildroot):
            for filename in filenames:
                fpath = os.path.abspath(os.path.join(dirpath, filename))
                if _check_path(fpath):
                    manifest = osgi.open_manifest(fpath)
                    if not manifest:
                        continue
                    provided.append(osgi.OsgiProvideInfo.from_manifest(manifest))

        # print requires
        for path in paths:
            if not os.path.islink(path):
                manifest = osgi.open_manifest(path)
                if not manifest:
                    continue
                reqs = osgi.get_requires_from_manifest(manifest)
                for bundle in reqs:
                    pinfo = osgi.OsgiProvideInfo(symbolicName=bundle)
                    if pinfo in provided:
                        index = provided.index(pinfo)
                        print("osgi(%s) = %s" % (bundle, provided[index].version))
                    else:
                        print("osgi(%s)" % (bundle))


def _check_path(path):
    if os.path.islink(path):
        return False
    if path.endswith(".jar"):
        return True
    if path.endswith("/MANIFEST.MF"):
        # who knows where the manifest can be in buildroot
        # TODO: improve this check somehow(?)
        # this is an attempt to identify only MANIFEST.MF files
        # which are in %{_datadir} or %{_libdir}
        if "/usr/share/" in path or "/usr/lib" in path:
            return True
    return False


if __name__ == "__main__":
    builder = TagBuilder()
